{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saura\\\\Desktop\\\\Sen-React-main (1)\\\\Sen-React-main\\\\src\\\\Startt.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport Songs from './Songs';\nimport Books from './Books';\nimport Podcast from './Podcast';\nimport Movie from './Movie';\nimport Yoga from './Yoga';\nimport './Startt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet tempEmo;\nconst Startt = () => {\n  _s();\n  const [chartInstance, setChartInstance] = useState(null);\n  const [suggestionsVisible, setSuggestionsVisible] = useState(false);\n  const [emotionLabel, setEmotionLabel] = useState(null);\n  const [selectedComponent, setSelectedComponent] = useState(null);\n  const [loading, setLoading] = useState(false); // State to manage loading state\n\n  const performQuery = async () => {\n    const queryInput = document.getElementById('queryInput').value.trim();\n    if (queryInput !== '') {\n      try {\n        setLoading(true); // Show loading state\n\n        const response = await queryApi({\n          inputs: queryInput\n        });\n        const responseData = response[0];\n        const data = responseData.map(({\n          label,\n          score\n        }) => ({\n          label,\n          score\n        }));\n        tempEmo = data[0].label;\n        const ctx = document.getElementById('myChart');\n        const newChartInstance = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: data.map(row => row.label),\n            datasets: [{\n              label: data[0].label,\n              data: data.map(row => row.score),\n              backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n              borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n              borderWidth: 1\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n        setChartInstance(newChartInstance);\n        setEmotionLabel(data[0].label);\n        showSuggestions();\n        showChart();\n      } catch (error) {\n        console.error('Error performing query:', error);\n      } finally {\n        setLoading(false); // Hide loading state regardless of success or error\n      }\n    } else {\n      console.warn('Query input is empty');\n    }\n  };\n  const handleButtonClick = label => {\n    setEmotionLabel(label); // Set emotion label based on button clicked\n    setSelectedComponent(label.toUpperCase()); // Set selected component based on button clicked\n\n    // Remove existing selected class from all buttons\n    const buttons = document.querySelectorAll('.button');\n    buttons.forEach(button => {\n      button.classList.remove('selected');\n    });\n\n    // Add selected class to the button with the clicked label\n    const selectedButton = document.querySelector(`.button[data-label=\"${label.toLowerCase()}\"]`);\n    if (selectedButton) {\n      selectedButton.classList.add('selected');\n    }\n  };\n  const startSpeechRecognition = () => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new webkitSpeechRecognition();\n      recognition.lang = 'en-US';\n      recognition.start();\n      recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        document.getElementById('queryInput').value = transcript;\n        performQuery();\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        // Handle error, e.g., show error message to user\n      };\n    } else {\n      console.error('Speech recognition not supported');\n      // Handle case where speech recognition is not supported\n    }\n  };\n  const redirectToPage = pageUrl => {\n    window.location.href = pageUrl;\n  };\n  const queryApi = async data => {\n    const response = await fetch(\"https://api-inference.huggingface.co/models/SamLowe/roberta-base-go_emotions\", {\n      headers: {\n        Authorization: \"Bearer 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\"\n      },\n      method: \"POST\",\n      body: JSON.stringify(data)\n    });\n    const result = await response.json();\n    return result;\n  };\n  const showChart = () => {\n    document.getElementById('queryInput').style.display = 'none';\n    document.getElementById('submitBtn').style.display = 'none';\n    document.getElementById('speechRecognitionBtn').style.display = 'none';\n    document.getElementById('suggestionsSection').style.display = 'block';\n  };\n  const showSuggestions = () => {\n    setSuggestionsVisible(true);\n  };\n\n  // Render the selected component based on button click\n  const renderSelectedComponent = () => {\n    switch (selectedComponent) {\n      case 'songs':\n        return /*#__PURE__*/_jsxDEV(Songs, {\n          emotionLabel: tempEmo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 24\n        }, this);\n      case 'books':\n        return /*#__PURE__*/_jsxDEV(Books, {\n          emotionLabel: tempEmo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 24\n        }, this);\n      case 'podcast':\n        return /*#__PURE__*/_jsxDEV(Yoga, {\n          emotionLabel: tempEmo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 24\n        }, this);\n      case 'movies':\n        return /*#__PURE__*/_jsxDEV(Movie, {\n          emotionLabel: tempEmo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 24\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SentimentZen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Take a moment to immerse yourself in the beauty of life's simple joys. Let the gentle whispers of nature soothe your soul, as you embrace the warmth of a sun-kissed breeze.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Feel the rhythm of your heartbeat synchronize with the melody of the universe, reminding you of the infinite possibilities that lie ahead. Allow gratitude to fill your heart and gratitude to guide your path.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        id: \"textInputLabel\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"queryInput\",\n          placeholder: \"How are you feeling?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"submitBtn\",\n          onClick: performQuery,\n          className: loading ? 'loading' : '',\n          children: \"Analyze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"or-divider\",\n        id: \"orDivider\",\n        children: \"OR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"speechRecognitionBtn\",\n          onClick: startSpeechRecognition,\n          children: \"Start Speech Recognition\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"firstemotionText\",\n        children: emotionLabel && `Based on the analysis you seem to be feeling: ${tempEmo}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), suggestionsVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"suggestionsSection\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"emotionText\",\n          children: \"Here are some suggestions based on your mood:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => handleButtonClick('Songs'),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"imgs/song.png\",\n              alt: \"Songs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"textt\",\n              children: \"Songs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => handleButtonClick('Books'),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"imgs/book.png\",\n              alt: \"Books\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"textt\",\n              children: \"Books\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => handleButtonClick('Podcast'),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"imgs/podcast.png\",\n              alt: \"Podcast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"textt\",\n              children: \"Meditation and Yoga\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => handleButtonClick('Movies'),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"imgs/movie.png\",\n              alt: \"Movies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"textt\",\n              children: \"Movies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"recommend\",\n      children: selectedComponent && renderSelectedComponent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n_s(Startt, \"xj0+b3vqnNMjLSqiQjLiOx/lagE=\");\n_c = Startt;\nexport default Startt;\nvar _c;\n$RefreshReg$(_c, \"Startt\");","map":{"version":3,"names":["React","useState","Chart","Songs","Books","Podcast","Movie","Yoga","jsxDEV","_jsxDEV","tempEmo","Startt","_s","chartInstance","setChartInstance","suggestionsVisible","setSuggestionsVisible","emotionLabel","setEmotionLabel","selectedComponent","setSelectedComponent","loading","setLoading","performQuery","queryInput","document","getElementById","value","trim","response","queryApi","inputs","responseData","data","map","label","score","ctx","newChartInstance","type","labels","row","datasets","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","showSuggestions","showChart","error","console","warn","handleButtonClick","toUpperCase","buttons","querySelectorAll","forEach","button","classList","remove","selectedButton","querySelector","toLowerCase","add","startSpeechRecognition","window","recognition","webkitSpeechRecognition","lang","start","onresult","event","transcript","results","onerror","redirectToPage","pageUrl","location","href","fetch","headers","Authorization","method","body","JSON","stringify","result","json","style","display","renderSelectedComponent","fileName","_jsxFileName","lineNumber","columnNumber","className","children","id","placeholder","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/saura/Desktop/Sen-React-main (1)/Sen-React-main/src/Startt.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport Songs from './Songs';\r\nimport Books from './Books';\r\nimport Podcast from './Podcast';\r\nimport Movie from './Movie';\r\nimport Yoga from './Yoga';\r\nimport './Startt.css';\r\nlet tempEmo;\r\n\r\nconst Startt = () => {\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n    const [suggestionsVisible, setSuggestionsVisible] = useState(false);\r\n    const [emotionLabel, setEmotionLabel] = useState(null);\r\n    const [selectedComponent, setSelectedComponent] = useState(null);\r\n    const [loading, setLoading] = useState(false); // State to manage loading state\r\n\r\n    const performQuery = async () => {\r\n        const queryInput = document.getElementById('queryInput').value.trim();\r\n\r\n        if (queryInput !== '') {\r\n            try {\r\n                setLoading(true); // Show loading state\r\n\r\n                const response = await queryApi({ inputs: queryInput });\r\n                const responseData = response[0];\r\n                const data = responseData.map(({ label, score }) => ({ label, score }));\r\n                tempEmo = data[0].label;\r\n                const ctx = document.getElementById('myChart');\r\n                const newChartInstance = new Chart(ctx, {\r\n                    type: 'bar',\r\n                    data: {\r\n                        labels: data.map(row => row.label),\r\n                        datasets: [{\r\n                            label: data[0].label,\r\n                            data: data.map(row => row.score),\r\n                            backgroundColor: [\r\n                                'rgba(255, 99, 132, 0.2)',\r\n                                'rgba(54, 162, 235, 0.2)',\r\n                                'rgba(255, 206, 86, 0.2)',\r\n                                'rgba(75, 192, 192, 0.2)',\r\n                                'rgba(153, 102, 255, 0.2)',\r\n                                'rgba(255, 159, 64, 0.2)'\r\n                            ],\r\n                            borderColor: [\r\n                                'rgba(255, 99, 132, 1)',\r\n                                'rgba(54, 162, 235, 1)',\r\n                                'rgba(255, 206, 86, 1)',\r\n                                'rgba(75, 192, 192, 1)',\r\n                                'rgba(153, 102, 255, 1)',\r\n                                'rgba(255, 159, 64, 1)'\r\n                            ],\r\n                            borderWidth: 1\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        scales: {\r\n                            y: {\r\n                                beginAtZero: true\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                setChartInstance(newChartInstance);\r\n                setEmotionLabel(data[0].label);\r\n                showSuggestions();\r\n                showChart();\r\n            } catch (error) {\r\n                console.error('Error performing query:', error);\r\n            } finally {\r\n                setLoading(false); // Hide loading state regardless of success or error\r\n            }\r\n        } else {\r\n            console.warn('Query input is empty');\r\n        }\r\n    };\r\n\r\n    const handleButtonClick = (label) => {\r\n        setEmotionLabel(label); // Set emotion label based on button clicked\r\n        setSelectedComponent(label.toUpperCase()); // Set selected component based on button clicked\r\n        \r\n        // Remove existing selected class from all buttons\r\n        const buttons = document.querySelectorAll('.button');\r\n        buttons.forEach(button => {\r\n            button.classList.remove('selected');\r\n        });\r\n    \r\n        // Add selected class to the button with the clicked label\r\n        const selectedButton = document.querySelector(`.button[data-label=\"${label.toLowerCase()}\"]`);\r\n        if (selectedButton) {\r\n            selectedButton.classList.add('selected');\r\n        }\r\n    };\r\n    \r\n\r\n    const startSpeechRecognition = () => {\r\n        if ('webkitSpeechRecognition' in window) {\r\n            const recognition = new webkitSpeechRecognition();\r\n            recognition.lang = 'en-US';\r\n    \r\n            recognition.start();\r\n    \r\n            recognition.onresult = (event) => {\r\n                const transcript = event.results[0][0].transcript;\r\n                document.getElementById('queryInput').value = transcript;\r\n                performQuery();\r\n            };\r\n    \r\n            recognition.onerror = (event) => {\r\n                console.error('Speech recognition error:', event.error);\r\n                // Handle error, e.g., show error message to user\r\n            };\r\n        } else {\r\n            console.error('Speech recognition not supported');\r\n            // Handle case where speech recognition is not supported\r\n        }\r\n    };\r\n\r\n    const redirectToPage = (pageUrl) => {\r\n        window.location.href = pageUrl;\r\n    };\r\n\r\n    const queryApi = async (data) => {\r\n        const response = await fetch(\r\n            \"https://api-inference.huggingface.co/models/SamLowe/roberta-base-go_emotions\",\r\n            {\r\n                headers: { Authorization: \"Bearer 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\" },\r\n                method: \"POST\",\r\n                body: JSON.stringify(data),\r\n            }\r\n        );\r\n        const result = await response.json();\r\n        return result;\r\n    };\r\n\r\n    const showChart = () => {\r\n        document.getElementById('queryInput').style.display = 'none';\r\n        document.getElementById('submitBtn').style.display = 'none';\r\n        document.getElementById('speechRecognitionBtn').style.display = 'none';\r\n        document.getElementById('suggestionsSection').style.display = 'block';\r\n    };\r\n\r\n    const showSuggestions = () => {\r\n        setSuggestionsVisible(true);\r\n    };\r\n\r\n    // Render the selected component based on button click\r\n    const renderSelectedComponent = () => {\r\n        switch (selectedComponent) {\r\n            case 'songs':\r\n                return <Songs emotionLabel={tempEmo} />;\r\n            case 'books':\r\n                return <Books emotionLabel={tempEmo} />;\r\n            case 'podcast':\r\n                return <Yoga emotionLabel={tempEmo} />;\r\n            case 'movies':\r\n                return <Movie emotionLabel={tempEmo} />;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <h1>SentimentZen</h1>\r\n            <p>Take a moment to immerse yourself in the beauty of life's simple joys. Let the gentle whispers of nature soothe your soul, as you embrace the warmth of a sun-kissed breeze.</p>\r\n            <p> Feel the rhythm of your heartbeat synchronize with the melody of the universe, reminding you of the infinite possibilities that lie ahead. Allow gratitude to fill your heart and gratitude to guide your path.</p>\r\n            <div className=\"container\">\r\n                <canvas id=\"myChart\"></canvas>\r\n                <div className=\"input-container\" id=\"textInputLabel\">\r\n                    <input type=\"text\" id=\"queryInput\" placeholder=\"How are you feeling?\" />\r\n                    <button id=\"submitBtn\" onClick={performQuery} className={loading ? 'loading' : ''}>Analyze</button>\r\n                    \r\n                </div>\r\n\r\n                <div className=\"or-divider\" id=\"orDivider\">OR</div>\r\n\r\n                <div className=\"input-container\">\r\n                    <button id=\"speechRecognitionBtn\" onClick={startSpeechRecognition}>Start Speech Recognition</button>\r\n                </div>\r\n                <p id=\"firstemotionText\">{emotionLabel && `Based on the analysis you seem to be feeling: ${tempEmo}`}</p>\r\n                {suggestionsVisible && (\r\n                    <div id=\"suggestionsSection\">\r\n                        <p id=\"emotionText\">Here are some suggestions based on your mood:</p>\r\n                        <div className=\"suggestions-container\">\r\n                            <button className=\"button\" onClick={() => handleButtonClick('Songs')}>\r\n                                <img src=\"imgs/song.png\" alt=\"Songs\" />\r\n                                <h2 className='textt'>Songs</h2>\r\n                            </button>\r\n                            <button className=\"button\" onClick={() => handleButtonClick('Books')}>\r\n                                <img src=\"imgs/book.png\" alt=\"Books\" />\r\n                                <h2 className='textt'>Books</h2>\r\n                            </button>\r\n                            <button className=\"button\" onClick={() => handleButtonClick('Podcast')}>\r\n                                <img src=\"imgs/podcast.png\" alt=\"Podcast\" />\r\n                                <h2 className='textt'>Meditation and Yoga</h2>\r\n                            </button>\r\n                            <button className=\"button\" onClick={() => handleButtonClick('Movies')}>\r\n                                <img src=\"imgs/movie.png\" alt=\"Movies\" />\r\n                                <h2 className='textt'>Movies</h2>\r\n                            </button>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    \r\n                )}\r\n            </div>\r\n            <div id=\"recommend\">\r\n                {selectedComponent && renderSelectedComponent()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Startt;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}